        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "scan.h"
        -:    2:
        -:    3:/* keyword list */
        -:    4:struct KEY key[KEYWORDSIZE] = {
        -:    5:  {"and", TAND},         {"array", TARRAY},     {"begin", TBEGIN},
        -:    6:  {"boolean", TBOOLEAN}, {"break", TBREAK},     {"call", TCALL},
        -:    7:  {"char", TCHAR},       {"div", TDIV},         {"do", TDO},
        -:    8:  {"else", TELSE},       {"end", TEND},         {"false", TFALSE},
        -:    9:  {"if", TIF},           {"integer", TINTEGER}, {"not", TNOT},
        -:   10:  {"of", TOF},           {"or", TOR},           {"procedure", TPROCEDURE},
        -:   11:  {"program", TPROGRAM}, {"read", TREAD},       {"readln", TREADLN},
        -:   12:  {"return", TRETURN},   {"then", TTHEN},       {"true", TTRUE},
        -:   13:  {"var", TVAR},         {"while", TWHILE},     {"write", TWRITE},
        -:   14:  {"writeln", TWRITELN}};
        -:   15:
        -:   16:/* Token counter */
        -:   17:int numtoken[NUMOFTOKEN + 1];
        -:   18:
        -:   19:/* string of each token */
        -:   20:char *tokenstr[NUMOFTOKEN + 1] = {
        -:   21:  "",        "NAME",    "program", "var",     "array",     "of",     
        -:   22:  "begin",   "end",     "if",      "then",    "else",      "procedure",
        -:   23:  "return",  "call",    "while",   "do",      "not",       "or",
        -:   24:  "div",     "and",     "char",    "integer", "boolean",   "readln",
        -:   25:  "writeln", "true",    "false",   "NUMBER",  "STRING",    "+",
        -:   26:  "-",       "*",       "=",       "<>",      "<",         "<=",
        -:   27:  ">",       ">=",      "(",       ")",       "[",         "]",
        -:   28:  ":=",      ".",       ",",       ":",       ";",         "read",   
        -:   29:  "write",   "break"};
        -:   30:
function main called 2 returned 100% blocks executed 90%
        2:   31:int main(int nc, char *np[]) {
        -:   32:  int token, i;
        -:   33:
        2:   34:  if (nc < 2) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   35:    error("File name is not given.");
    #####:   36:    return 0;
        -:   37:  }
        2:   38:  if (init_scan(np[1]) < 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   39:    error("Cannot open input file.");
    #####:   40:	  end_scan();
    #####:   41:    return 0;
        -:   42:  }
        -:   43:
        -:   44:  /* 作成する部分：トークンカウント用の配列？を初期化する */
        -:   45:
      102:   46:  for (i = 0; i <= NUMOFTOKEN; i++) {
branch  0 taken 98%
branch  1 taken 2%
      100:   47:    numtoken[i] = 0;
      100:   48:  }
        -:   49:
     1766:   50:  while ((token = scan()) >= 0) {
branch  0 taken 99%
branch  1 taken 1%
     1764:   51:    if (token >= 0 && token <= NUMOFTOKEN) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
     1764:   52:        numtoken[token]++;  // Count the token
     1764:   53:    }
        -:   54:  }
        -:   55:
        2:   56:  end_scan();
        -:   57:
        -:   58:  /* 作成する部分:カウントした結果を出力する */
        2:   59:  printf("Program %s Output:\n", np[1]);  // Display the file name
      102:   60:  for (i = 0; i <= NUMOFTOKEN; i++) {
branch  0 taken 98%
branch  1 taken 2%
      100:   61:      if (numtoken[i] > 0) {
branch  0 taken 24%
branch  1 taken 76%
       76:   62:          printf("\"%-10s\" %4d\n", tokenstr[i], numtoken[i]);  // Format the output
       76:   63:      }
      100:   64:  }
        -:   65:
        2:   66:  return 0;
        -:   67:  
        2:   68:}
