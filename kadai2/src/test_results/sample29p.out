programNAME ;
 varNAME :integer;
NAME :array[NUMBER ]ofchar;
procedureNAME (NAME ,NAME ,NAME ,NAME :integer);
varNAME ,NAME ,NAME :integer;
begin
    NAME :=NAME ;
     NAME :=NAME ;
     whileNAME <>NUMBER do
         begin
             NAME :=NAME -(NAME divNAME )*NAME ;
             NAME :=NAME ;
             NAME :=NAME end
         ;
         NAME :=NAME ;
         NAME :=(NAME divNAME )*NAME end
     ;
     procedureNAME (NAME ,NAME :integer);
    begin
        ifNAME <NUMBER thenNAME :=-NAME elseNAME :=NAME end
     ;
     procedureNAME (NAME ,NAME ,NAME :integer);
    varNAME ,NAME ,NAME :integer;
    begin
        if(NAME =NUMBER )or(NAME =NUMBER )thenNAME :=NUMBER elsebegin
            callNAME (NAME ,NAME );
            callNAME (NAME ,NAME );
            callNAME (NAME ,NAME ,NAME ,NAME )end
        end
    ;
    procedureNAME (NAME ,NAME ,NAME :integer);
    varNAME ,NAME ,NAME :integer;
    begin
        if(NAME =NUMBER )or(NAME =NUMBER )thenNAME :=NUMBER elsebegin
            callNAME (NAME ,NAME );
            callNAME (NAME ,NAME );
            callNAME (NAME ,NAME ,NAME ,NAME )end
        end
    ;
    varNAME :char;
    procedureNAME (NAME ,NAME :integer);
    varNAME :integer;
    begin
        ifNAME =NUMBER thenbegin
            NAME :=NUMBER ;
             returnend
        ;
        ifNAME =NUMBER thenbegin
            NAME :=NUMBER ;
             returnend
        ;
        ifNAME <NUMBER thenbegin
            NAME :=-NAME ;
             NAME :=-NAME end
         ;
         callNAME (NAME ,NAME ,NAME );
        NAME :=NAME divNAME ;
         NAME :=NAME divNAME end
     ;
     procedureNAME (NAME ,NAME ,NAME ,NAME :integer);
    varNAME ,NAME :integer;
    begin
        callNAME (NAME ,NAME ,NAME );
        NAME :=NAME *(NAME divNAME );
        NAME :=NAME *(NAME divNAME );
        NAME :=NAME +NAME ;
         NAME :=NAME ;
         callNAME (NAME ,NAME )end
    ;
    procedureNAME (NAME ,NAME ,NAME ,NAME :integer);
    varNAME ,NAME :integer;
    begin
        callNAME (NAME ,NAME ,-NAME ,NAME )end
    ;
    procedureNAME (NAME ,NAME ,NAME ,NAME :integer);
    varNAME ,NAME ,NAME :integer;
    begin
        callNAME (NAME ,NAME ,NAME );
        NAME :=NAME divNAME ;
         NAME :=NAME divNAME ;
         callNAME (NAME ,NAME ,NAME );
        NAME :=NAME divNAME ;
         NAME :=NAME divNAME ;
         NAME :=NAME *NAME ;
         NAME :=NAME *NAME ;
         callNAME (NAME ,NAME )end
    ;
    procedureNAME (NAME ,NAME ,NAME ,NAME :integer);
    begin
        callNAME (NAME ,NAME ,NAME ,NAME )end
    ;
    varNAME :array[NUMBER ]ofchar;
    procedureNAME (NAME ,NAME :integer);
    begin
        ifNAME =NUMBER thenwriteln(STRING ,NAME )elseifNAME =NUMBER thenwriteln(STRING ,NAME )elsewriteln(STRING ,NAME ,STRING ,NAME )end
    ;
    procedureNAME (NAME ,NAME :integer);
    begin
        ifNAME =NUMBER thenwriteln(STRING ,NAME )elseifNAME =NUMBER thenwriteln(STRING ,NAME )elsewriteln(STRING ,NAME ,STRING ,NAME )end
    ;
    varNAME ,NAME ,NAME ,NAME :integer;
    varNAME :char;
    NAME :boolean;
    begin
        writeln(STRING );
        NAME :=NUMBER ;
         NAME :=NUMBER ;
         NAME :=false;
        whilenotNAME do
             begin
                 writeln(STRING );
                readln(NAME ,NAME );
                NAME :=NUMBER ;
                 if(NAME =STRING )or(NAME =STRING )thenbegin
                    NAME :=NAME ;
                     NAME :=NAME end
                 elseifNAME =STRING thencallNAME (NAME ,NAME ,NAME ,NAME )elseifNAME =STRING thencallNAME (NAME ,NAME ,NAME ,NAME )elseifNAME =STRING thencallNAME (NAME ,NAME ,NAME ,NAME )elseifNAME =STRING thencallNAME (NAME ,NAME ,NAME ,NAME )elseif(NAME =STRING )or(NAME =STRING )thenNAME :=trueelsebegin
                    writeln;
                    writeln(STRING );
                    writeln(STRING );
                    writeln(STRING );
                    writeln(STRING );
                    writeln(STRING );
                    writeln(STRING );
                    writeln(STRING );
                    writelnend
                ;
                ifNAME thencallNAME (NAME ,NAME )elsecallNAME (NAME ,NAME )end
            end
        .
